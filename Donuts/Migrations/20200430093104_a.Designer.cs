// <auto-generated />
using System;
using Donuts.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Donuts.Migrations
{
    [DbContext(typeof(DonutsContext))]
    [Migration("20200430093104_a")]
    partial class a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Donuts.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerName");

                    b.Property<string>("Password");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerName")
                        .IsUnique()
                        .HasFilter("[CustomerName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Donuts.Models.Domain", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExperiationDate");

                    b.Property<string>("Name")
                        .HasMaxLength(10);

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int?>("UserId");

                    b.HasKey("DomainId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("Donuts.Models.Domain", b =>
                {
                    b.HasOne("Donuts.Models.Customer", "User")
                        .WithMany("Domains")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
